apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "tardis.fullname" . }}
  labels:
    {{- include "tardis.labels" . | nindent 4 }}
data:
  {{- with .Values.settings }}
  settings.py: |
    import sys
    from datetime import timedelta
    from kombu import Exchange, Queue
    import sentry_sdk
    from sentry_sdk.integrations.django import DjangoIntegration
    from .default_settings import *

    ADMINS = [
      {{- range .admins }}
        ({{ .name | quote }}, {{ .email | quote }}),
      {{- end }}
    ]
    ALLOWED_HOSTS = [
      {{- range .allowed_hosts }}
        {{ . | quote }},
      {{- end }}
        '{{ include "tardis.fullname" $ }}-django.{{ $.Release.Namespace }}.svc.{{ $.Values.global.clusterDomain }}',
        '{{ include "tardis.fullname" $ }}-django',
        ".localhost",
        "127/8",
        "[::1]",
    ]

    {{- if or .auth.aaf .auth.google }}
    # Authentication
    # https://mytardis.readthedocs.io/en/develop/apps/social_auth.html
    # https://python-social-auth.readthedocs.io/en/latest/
    {{- if .auth.aaf }}
    AUTHENTICATION_BACKENDS += (
        'social_core.backends.open_id.OpenIdAuth',
        'tardis.apps.social_auth.auth.authorisation.AAFOpenId',
    )
    AUTH_PROVIDERS += (
        ('AAF','AAF','tardis.apps.social_auth.auth.authorisation.AAFOpenId'),
    )
    SOCIAL_AUTH_AAF_PIPELINE = (
        'social_core.pipeline.social_auth.social_details',
        'social_core.pipeline.social_auth.social_uid',
        'social_core.pipeline.social_auth.social_user',
        'social_core.pipeline.user.get_username',
        'social_core.pipeline.user.create_user',
        'tardis.apps.social_auth.auth.social_auth.configure_social_auth_user',
        'tardis.apps.social_auth.auth.social_auth.add_authentication_method',
        'tardis.apps.social_auth.auth.social_auth.approve_user_auth',
        'tardis.apps.social_auth.auth.social_auth.add_user_permissions',
        'social_core.pipeline.social_auth.associate_user',
        'social_core.pipeline.social_auth.load_extra_data',
        'social_core.pipeline.user.user_details',
    )
    {{- end }}
    {{- if .auth.google }}
    AUTHENTICATION_BACKENDS += (
        'social_core.backends.google.GoogleOpenId',
        'social_core.backends.google.GoogleOAuth2',
    )
    AUTH_PROVIDERS += (
        ('Google','Google','social_core.backends.google.GoogleOAuth2'),
    )
    SOCIAL_AUTH_GOOGLE_OAUTH2_PIPELINE = (
        'social_core.pipeline.social_auth.social_details',
        'social_core.pipeline.social_auth.social_uid',
        'social_core.pipeline.social_auth.social_user',
        'social_core.pipeline.user.get_username',
        'social_core.pipeline.user.create_user',
        'tardis.apps.social_auth.auth.social_auth.configure_social_auth_user',
        'tardis.apps.social_auth.auth.social_auth.add_authentication_method',
        'social_core.pipeline.social_auth.associate_user',
        'social_core.pipeline.social_auth.load_extra_data',
        'social_core.pipeline.user.user_details',
        'tardis.apps.social_auth.auth.social_auth.send_admin_email',
    )
    {{- end }}
    INSTALLED_APPS += (
        'social_django',
        'tardis.apps.social_auth',
        'mytardis_openid_login',
    )
    LOGIN_VIEWS = {
        1: 'mytardis_openid_login.views.LoginView',
    }
    MIDDLEWARE += (
        'social_django.middleware.SocialAuthExceptionMiddleware',
    )
    SOCIAL_AUTH_URL_NAMESPACE_BEGIN = 'social:begin',
    TEMPLATES[0]['OPTIONS']['context_processors'].extend(
        [
            'social_django.context_processors.backends',
            'social_django.context_processors.login_redirect',
        ]
    )
    {{- end }}

    CACHES = {
      {{- range $alias,$opts := .caches }}
        {{ $alias | quote }}: {
            'BACKEND': {{ $opts.backend | quote }},
            'LOCATION': {{ $opts.location | quote }},
        },
      {{- end }}
    }
    # CELERY = {} located in Secret
    CHUNK_STORAGE = {{ .chunks_store_path | quote }}
    # DATABASES = {} located in Secret
    DEBUG = {{ if .debug }}True{{ else }}False{{ end }}
    DEFAULT_FROM_EMAIL = {{ .default.from_email | quote }}
    DEFAULT_INSTITUTION = {{ .default.institution | quote }}
    DEFAULT_STORAGE_BASE_DIR = {{ .default_store_path | quote }}

    # Email settings
    EMAIL_HOST = {{ .email.host | quote }}
    EMAIL_PORT = {{ .email.port | quote }}
    DEFAULT_FROM_EMAIL = {{ .email.from | quote }}
    SERVER_EMAIL = {{ .email.host | quote }}
    EMAIL_SUBJECT_PREFIX = {{ .email.subject_prefix | quote }}

    FILE_STORE_PATH = {{ .file_store.path | quote }}
    INSTALLED_APPS += (
      {{- range .installed_apps }}
        {{ . | quote }},
      {{- end }}
    )

    MODULE_LOG_FILENAME = '/tmp/tardis.log'
    SYSTEM_LOG_FILENAME = '/tmp/request.log'
    LOGGING = {
        'disable_existing_loggers': False,
        'handlers': {
            'stdout': {
                'class': 'logging.StreamHandler',
                'level': 'DEBUG',
                'stream': 'ext://sys.stdout',
            },
            'stderr': {
                'class': 'logging.StreamHandler',
                'level': 'INFO',
                'stream': 'ext://sys.stderr',
            },
        },
        'loggers': {
            'django': {
                'handlers': ['stdout'],
                'level': {{ $.Values.django.log_level | quote }},
            },
            __name__: {
                'handlers': ['stdout'],
                'propagate': False,
                'level': {{ .logging.system_log_level | quote }},
            },
            'tardis': {
                'handlers': ['stdout'],
                'propagate': False,
                'level': {{ .logging.module_log_level | quote }},
            },
        },
        'version': 1,
    }

    MANAGERS = [
      {{- range .managers }}
        ({{ .name | quote }}, {{ .email | quote }}),
      {{- end }}
    ]
    METADATA_STORE_PATH = {{ .metadata_store_path | quote }}
    MYTARDIS_DEFAULT_RECEIVING_DIR = {{ .default.receiving_dir.path | quote }}
    NEW_USER_INITIAL_GROUPS = [
      {{- range .user.initialGroups }}
        {{ . | quote }},
      {{- end }}
    ]
    REGISTRATION_OPEN = {{ if .registrationOpen }}True{{ else }}False{{ end }}

    REQUIRE_DATAFILE_CHECKSUMS = {{ if .require.datafile.checksums }}True{{ else }}False{{ end }}
    REQUIRE_DATAFILE_SIZES = {{ if .require.datafile.sizes }}True{{ else }}False{{ end }}
    REQUIRE_VALIDATION_ON_INGESTION = {{ if .require.validation_on_ingestion }}True{{ else }}False{{ end }}
    REQUIRE_VALID_PUBLIC_CONTACTS = {{ if .require.valid_public_contacts }}True{{ else }}False{{ end }}

    # Site details
    SITE_ID = {{ .site.id | quote }}
    SITE_TITLE = {{ .site.title | quote }}

    STATIC_ROOT = {{ .static.files_path | quote }}
    STATIC_URL = {{ .static.url_path_prefix | quote }}

    TIME_ZONE = {{ .timezone | quote }}

    USE_X_FORWARDED_HOST = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_ORIGINAL_PROTO', 'https')
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

    DEFAULT_ARCHIVE_FORMATS = ['tar']
    REDIS_VERIFY_MANAGER = False

    # SFTP settings ?
    {{- if .sftp }}
    {{- with .sftp }}
    # SFTP settings
    SFTP_GEVENT = {{ .gevent | quote }}
    SFTP_HOST_KEY = {{ .host_key | quote }}
    SFTP_PORT = {{ .port | quote }}
    SFTP_USERNAME_ATTRIBUTE = {{ .username_attribute | quote }}
    {{- end }}
    {{- end }}

    {{- if .group_providers }}
    GROUP_PROVIDERS = (
      {{- range .group_providers }}
        {{ . | quote }},
      {{- end }}
    )
    {{- end }}
        
    # Context processors
    #TEMPLATES[0]['OPTIONS']['context_processors'].extend(
    #    data.get('context_processors', []))

    # Override default middleware if specified in yaml data:
    #if 'middleware' in data:
    #    MIDDLEWARE = data.get('middleware')

    # Overridable login views
    {{- if .login_views }}
    #if 'login_views' in data:
    #    LOGIN_VIEWS_FROM_YAML = data.get('login_views')
    #    LOGIN_VIEWS = { int(key): LOGIN_VIEWS_FROM_YAML[key] for key in LOGIN_VIEWS_FROM_YAML.keys() }
    {{- end }}
  {{- end }}

  {{- with .Values.celery }}
    # Celery configuration
    CELERY_RESULT_BACKEND = {{ .worker.result.backend | quote }}
    CELERY_QUEUES += (
        Queue('filters', Exchange('filters'),
              routing_key='filters',
              queue_arguments={'x-max-priority': MAX_TASK_PRIORITY}),
    )
  {{- end }}
    #{{- with .Values.celery.beat }}
    #  CELERYBEAT_SCHEDULE = {
    #    {{- range $name,$params := .schedule }}
    #      {{ $name | quote }}: {
    #          'task': {{ $params.task | quote }},
    #          'schedule': {{ $params.schedule }},
    #          'kwargs': {'priority': DEFAULT_TASK_PRIORITY},
    #        'schedule': timedelta(
    #            days={{ $params.schedule }}.get('days', 0),
    #            seconds={{ $params.schedule }}.get('seconds', 0),
    #            microseconds={{ $params.schedule }}.get('microseconds', 0),
    #            milliseconds={{ $params.schedule }}.get('milliseconds', 0),
    #            minutes={{ $params.schedule }}.get('minutes', 0),
    #            hours={{ $params.schedule }}.get('hours', 0),
    #            weeks={{ $params.schedule }}.get('weeks', 0),
    #        ),
    #        'kwargs': params.get('kwargs', {'priority': DEFAULT_TASK_PRIORITY})
    #      }
    #  {{- end }}
    #  }
    #{{- end }}

    from .secrets import *
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "tardis.fullname" . }}-nginx
  labels:
    {{- include "tardis.labels" . | nindent 4 }}
data:
  default.conf: |
    server {
      listen       {{ .Values.static.service.port }};
      server_name  {{ .Values.static.host | default "localhost" }};

      location / {
          root   /usr/share/nginx/html;
          index  index.html index.htm;
      }

      error_page   500 502 503 504  /50x.html;
      location = /50x.html {
          root   /usr/share/nginx/html;
      }
    }
